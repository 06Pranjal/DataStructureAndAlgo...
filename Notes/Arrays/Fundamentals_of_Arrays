ðŸ“˜ Fundamentals of Arrays
1. Definition and Characteristics of Arrays

An array is a collection of elements of the same data type stored in contiguous memory locations.

Each element can be accessed using an index (0-based in most programming languages).

Arrays provide fast random access in O(1) time.

They are one of the most basic and widely used data structures.

2. Static vs Dynamic Arrays

Static Array

Fixed size (decided at the time of declaration)

Example:

int[] arr = new int[5];  // Java


Advantages: Simple and efficient when size is known

Limitations: Cannot be resized; may waste memory

Dynamic Array

Size can grow or shrink during runtime

Example:

ArrayList<Integer> arr = new ArrayList<>();  // Java


Advantages: Flexible size

Limitations: Slightly slower during resizing operations

3. Memory Representation of Arrays

Arrays are stored in contiguous memory blocks.

Address of any element is calculated as:

Address(arr[i]) = BaseAddress + (i Ã— size_of_element)


This allows constant time (O(1)) access to any element.

4. Array Declaration and Initialization

Declaration Examples

int[] arr = new int[5];


Initialization Examples

int[] arr = {1, 2, 3, 4, 5};


Partial Initialization

int[] arr = new int[5];
arr[0] = 1;
arr[1] = 2;
// Remaining elements become 0 by default

5. Traversal (Iterating Through Elements)

Traversal means visiting each element of the array one by one.

Example (Java):

int[] arr = {10, 20, 30, 40, 50};
for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}


Time Complexity: O(n)

6. Advantages of Arrays

Random access using index (O(1))

Stored in contiguous memory (cache friendly)

Easy to declare and use

Foundation for many other data structures (stack, queue, heap)

7. Limitations of Arrays

Fixed size (cannot be resized easily)

Insertion and deletion are costly (require shifting elements â€” O(n))

Can store only one data type (homogeneous)

Memory wastage if declared size is greater than used size